name: CI Pipeline

on:
  push:
    branches:
      - dev  # Executa quando há push na branch dev
      - main  # Executa quando há push na branch main

jobs:
  audit_dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      # Clonar o repositório
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  

      # Configurar o Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # Instalar dependências
      - name: Install dependencies
        run: npm ci  # Instala as dependências do projeto

      # Rodar auditoria de segurança
      - name: Run npm audit
        run: npm audit --audit-level=high  # Falha se houver vulnerabilidades graves
      
      # Criar Pull Request de dev para main se passar na auditoria
      - name: Create Pull Request from dev to main
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          git config --global user.name "rafaelwollace"
          git config --global user.email "rafael.cunha@gmail.com"
          gh pr create --title "Merge dev to main" --body "PR criada automaticamente após passar no npm audit." --base main --head dev

  deploy_to_ec2:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      # Clonar o repositório
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Garantir que todas as branches sejam trazidas
      
      # Configurar o Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
        # Gerar o arquivo .env a partir dos secrets
      - name: Set environment variables from GitHub Secrets
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env

      # Instalar dependências
      - name: Install dependencies
        run: npm ci  # Instala as dependências do projeto
      
      # Rodar auditoria de segurança
      - name: Run npm audit
        run: npm audit --audit-level=high  # Falha se houver vulnerabilidades graves
      
      # Build da aplicação
      - name: Build the project
        run: npm run build  # Cria o build da aplicação (Vite gera na pasta dist/)

      # SSH para limpar o diretório de destino manualmente
      - name: SSH into EC2 and clean the target folder
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo rm -rf /home/ec2-user/app/*  # Remove todos os arquivos no diretório
            sudo mkdir -p /home/ec2-user/app  # Cria o diretório se não existir
      
      # Transferir arquivos para a EC2 via SCP
      - name: Transfer files to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./"  # Diretório de origem
          target: "/home/ec2-user/app"  # Diretório de destino na EC2

      # Ajustar permissões e rodar Docker Compose na EC2
      - name: SSH into EC2 and run Docker Compose
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo chown -R ec2-user:ec2-user /home/ec2-user/app
            cd /home/ec2-user/app
            docker-compose down  # Parar containers existentes
            docker-compose build  # Rebuildar os containers com o código novo
            docker-compose up -d  # Subir os containers em modo detached